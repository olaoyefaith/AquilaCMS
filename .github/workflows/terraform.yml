name: infrastructure as code deployment

on:
  workflow_run:
    workflows: ["build docker image"]  # The name of your build workflow
    types:
      - completed

env:
  LOCATION: westeurope
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage10275789
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: tfstate
  TF_STATE_ACCESS_KEY: ""
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  
permissions:
    id-token: write
    contents: read

  jobs:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Create storage for tfstate
        uses: azure/CLI@v1
        with:
          azcliversion: 2.35.0
          inlineScript: |
            # Create the resource group
            az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION

            # Create the storage account
            az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
              --name $TF_STATE_STORAGE_ACCOUNT_NAME \
              --sku Standard_LRS \
              --encryption-services blob

            # Retrieve the storage account key
            ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)

            # Create a storage container (for the Terraform State)
            az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

            echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i docker-image

      - name: Set Docker Image Environment Variable
        run: echo "DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}" >> $GITHUB_ENV


      - name: Replace Variables in terraform.tfvars
        uses: datamonsters/replace-action@v2
        with:
          files: infra/terraform.tfvars
          replacements: |
            __DOCKER_REGISTRY_SERVER_PASSWORD__=${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }},__DOCKER_REGISTRY_SERVER_URL__= ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}, __DOCKER_REGISTRY_SERVER_USERNAME__=${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }} ,__linux_fx_version__=${{ env.DOCKER_IMAGE }}
            
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: infra
        continue-on-error: true

      - name: Terraform Init (Azure Backend)
        id: init
        run: terraform init 
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
          -backend-config="access_key=$TF_STATE_ACCESS_KEY" 
          -backend-config="key=$TF_STATE_FILE_NAME"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        working-directory: SimpleApp_Terraform

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: SimpleApp_Terraform
        
      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: SimpleApp_Terraform
        continue-on-error: true

      # - name: Terraform apply
      #   run: terraform apply -auto-approve
      #   working-directory: infra
      #   env:
      #    ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #    ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #    ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #    ARM_USE_OIDC: true

      - name: Terraform destroy
        run: terraform destroy -auto-approve
        working-directory: SimpleApp_Terraform
        env:
         ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
         ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
         ARM_USE_OIDC: true
 