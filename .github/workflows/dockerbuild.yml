name: build docker image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - none

env:
  # DOCKER_IMAGE: ""
  DOCKER_IMAGE_NAME: aquilacms
  LOCATION: westeurope
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage10275789
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: tfstate
  TF_STATE_ACCESS_KEY: ""
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: build docker imaages
    runs-on: ubuntu-latest

    steps:
      - name: Set Date
        id: set_date
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          file: Dockerfile

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{env.IMAGE_TAG }}
          format: table
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: os,library
          severity: MEDIUM,HIGH,CRITICAL

      - name: Set Docker Image Output
        run: echo DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
        id: set-docker-image
        
      - name: Store Docker Image
        run: echo "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" > docker_image.txt
      
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: docker_image.txt 
        
  deploy-app-service:
       name: Deploy three tier application to azure
       runs-on: ubuntu-latest
       needs:
        - build-and-deploy
  
       steps:  
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Download Docker Image Artifact
          uses: actions/download-artifact@v2
          with:
            name: docker-image
        - name: Set DOCKER_IMAGE environment variable
          run: echo "DOCKER_IMAGE=$(cat docker_image.txt)" >> $GITHUB_ENV

        - name: Login to Azure
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
        - name: Create storage for tfstate
          uses: azure/CLI@v1
          with:
            azcliversion: 2.35.0
            inlineScript: |
              # Create the resource group
              az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION
  
              # Create the storage account
              az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
                --name $TF_STATE_STORAGE_ACCOUNT_NAME \
                --sku Standard_LRS \
                --encryption-services blob
  
              # Retrieve the storage account key
              ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
  
              # Create a storage container (for the Terraform State)
              az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY
  
              echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
  
  
        - name: Replace Variables in terraform.tfvars
          uses: datamonsters/replace-action@v2
          with:
            files: infrastructure/config.tfvars
            replacements: |
                __linux_fx_version__= "DOCKER|${{ env.DOCKER_IMAGE }}"
             
            # __DOCKER_REGISTRY_SERVER_PASSWORD__=${{ secrets.DOCKERHUB_TOKEN }},__DOCKER_REGISTRY_SERVER_URL__= ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}, __DOCKER_REGISTRY_SERVER_USERNAME__=${{ secrets.DOCKERHUB_USERNAME }} 
              
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.1.7
        - name: Terraform fmt
          id: fmt
          run: terraform fmt
          working-directory: infrastructure
          continue-on-error: true
  
        - name: Terraform Init (Azure Backend)
          id: init
          run: terraform init 
            -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
            -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
            -backend-config="access_key=$TF_STATE_ACCESS_KEY" 
            -backend-config="key=$TF_STATE_FILE_NAME"
          working-directory: infrastructure
  
        - name: Terraform Validate
          run: terraform validate -no-color
          working-directory: infrastructure
          
        - name: Terraform Plan
          id: plan
          run: terraform plan -var-file="config.tfvars"
          working-directory: infrastructure
          continue-on-error: true
  
        # - name: Terraform apply
        #   run: terraform apply -auto-approve
        #   working-directory: infrastructure
  
        # - name: Terraform destroy
        #   run: terraform destroy -auto-approve
        #   working-directory: SimpleApp_Terraform
      